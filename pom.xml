<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>edu.uw.data</groupId>
  <artifactId>lecture1_jdbc</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>lecture1_jdbc</name>
  <url>http://maven.apache.org</url>
  <description>
    Spring boot / auto configuration
    In which we look at raw JDBC calls for queries, inserts, updates and deletes.
    We also look at the equivalent calls using use the Spring JDBC template API.
    Finally we look at some testing strategies when using stateful databases,
  </description>


  <!-- Inherit defaults from Spring Boot (v1.3 of boot requires spring framework v4.2+)-->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.3.0.RC1</version>
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.7</java.version>
  </properties>

  <build>

    <plugins>

      <!-- Spring Boot includes a Maven plugin that can package the project as an executable jar.
      e.g mvn clean package -DskipTests spring-boot:repackage
      -->

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>


    </plugins>
  </build>



<dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>


    <!-- derby JDBC client to standalone server -->
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derbyclient</artifactId>
      <version>10.11.1.1</version>
    </dependency>

    <!-- embedded derby database engine and embedded JDBC client -->
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>10.11.1.1</version>
    </dependency>



    <!-- basic data source -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
    </dependency>

    <!-- string utils -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.0</version>
    </dependency>


  <!--&lt;!&ndash; log4j&ndash;&gt;-->
       <!--<dependency>-->
           <!--<groupId>log4j</groupId>-->
           <!--<artifactId>log4j</artifactId>-->
           <!--<version>1.2.17</version>-->
       <!--</dependency>-->

       <dependency>
           <groupId>commons-logging</groupId>
           <artifactId>commons-logging</artifactId>
           <version>1.2</version>
       </dependency>


       <dependency>
           <groupId>ch.qos.logback</groupId>
           <artifactId>logback-classic</artifactId>
           <version>1.1.2</version>
       </dependency>

    <!--  collection utils etc -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>18.0</version>
    </dependency>

 <!--
 allows for interpolated property files e.g
  server.name=localhost
  database.name=C:/derbydata/lecture1
   jdbc.url=jdbc:derby://${server.name}:1527/${database.name};create=true
 -->
  <dependency>
  	<groupId>commons-configuration</groupId>
  	<artifactId>commons-configuration</artifactId>
  	<version>1.10</version>
  </dependency>



    <!-- Support for common test dependencies, including JUnit, Hamcrest and Mockito along with the-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>


  </dependencies>


  <!-- Add Spring repositories -->
      <!-- (you don't need this if you are using a .RELEASE version) -->
      <repositories>
          <repository>
              <id>spring-snapshots</id>
              <url>http://repo.spring.io/snapshot</url>
              <snapshots><enabled>true</enabled></snapshots>
          </repository>
          <repository>
              <id>spring-milestones</id>
              <url>http://repo.spring.io/milestone</url>
          </repository>
      </repositories>
      <pluginRepositories>
          <pluginRepository>
              <id>spring-snapshots</id>
              <url>http://repo.spring.io/snapshot</url>
          </pluginRepository>
          <pluginRepository>
              <id>spring-milestones</id>
              <url>http://repo.spring.io/milestone</url>
          </pluginRepository>
      </pluginRepositories>
</project>
